a472880a8c59f973942feab854ed34c3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const weather_1 = require("../weather");
const sampleResponse = {
    coord: {
        lon: -73.99,
        lat: 40.73
    },
    weather: [
        {
            id: 500,
            main: 'Rain',
            description: 'light rain',
            icon: '10d'
        },
        {
            id: 701,
            main: 'Mist',
            description: 'mist',
            icon: '50d'
        }
    ],
    base: 'stations',
    main: {
        temp: 282.5,
        pressure: 1003,
        humidity: 87,
        temp_min: 280.15,
        temp_max: 284.82
    },
    visibility: 11265,
    wind: {
        speed: 3.6,
        deg: 160
    },
    rain: {
        '1h': 0.25
    },
    clouds: {
        all: 90
    },
    dt: 1554839356,
    sys: {
        type: 1,
        id: 4686,
        message: 0.0088,
        country: 'US',
        sunrise: 1554805602,
        sunset: 1554852482
    },
    id: 5128581,
    name: 'New York',
    cod: 200
};
describe('Weather Helpers', () => {
    describe('kelvinToFarenheit', () => {
        it('should convert K to F', () => {
            expect(weather_1.kelvinToFarenheit(sampleResponse.main.temp)).toBe(49);
        });
    });
    describe('computeOverallWeather', () => {
        expect(weather_1.computeOverallWeather(sampleResponse)).toEqual({
            description: 'Rain',
            icon: '10d',
            temperature: 49
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL05laWxEYWZ0YXJ5L1JOVHlwZXNjcmlwdC9oZWxwZXJzL19fdGVzdHNfXy93ZWF0aGVyLXRlc3QudHN4IiwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQXNFO0FBRXRFLE1BQU0sY0FBYyxHQUFHO0lBQ3JCLEtBQUssRUFBRTtRQUNMLEdBQUcsRUFBRSxDQUFDLEtBQUs7UUFDWCxHQUFHLEVBQUUsS0FBSztLQUNYO0lBQ0QsT0FBTyxFQUFFO1FBQ1A7WUFDRSxFQUFFLEVBQUUsR0FBRztZQUNQLElBQUksRUFBRSxNQUFNO1lBQ1osV0FBVyxFQUFFLFlBQVk7WUFDekIsSUFBSSxFQUFFLEtBQUs7U0FDWjtRQUNEO1lBQ0UsRUFBRSxFQUFFLEdBQUc7WUFDUCxJQUFJLEVBQUUsTUFBTTtZQUNaLFdBQVcsRUFBRSxNQUFNO1lBQ25CLElBQUksRUFBRSxLQUFLO1NBQ1o7S0FDRjtJQUNELElBQUksRUFBRSxVQUFVO0lBQ2hCLElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxLQUFLO1FBQ1gsUUFBUSxFQUFFLElBQUk7UUFDZCxRQUFRLEVBQUUsRUFBRTtRQUNaLFFBQVEsRUFBRSxNQUFNO1FBQ2hCLFFBQVEsRUFBRSxNQUFNO0tBQ2pCO0lBQ0QsVUFBVSxFQUFFLEtBQUs7SUFDakIsSUFBSSxFQUFFO1FBQ0osS0FBSyxFQUFFLEdBQUc7UUFDVixHQUFHLEVBQUUsR0FBRztLQUNUO0lBQ0QsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLElBQUk7S0FDWDtJQUNELE1BQU0sRUFBRTtRQUNOLEdBQUcsRUFBRSxFQUFFO0tBQ1I7SUFDRCxFQUFFLEVBQUUsVUFBVTtJQUNkLEdBQUcsRUFBRTtRQUNILElBQUksRUFBRSxDQUFDO1FBQ1AsRUFBRSxFQUFFLElBQUk7UUFDUixPQUFPLEVBQUUsTUFBTTtRQUNmLE9BQU8sRUFBRSxJQUFJO1FBQ2IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsTUFBTSxFQUFFLFVBQVU7S0FDbkI7SUFDRCxFQUFFLEVBQUUsT0FBTztJQUNYLElBQUksRUFBRSxVQUFVO0lBQ2hCLEdBQUcsRUFBRSxHQUFHO0NBQ1QsQ0FBQztBQUVGLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDL0IsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUNqQyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1lBQy9CLE1BQU0sQ0FBQywyQkFBaUIsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1FBQ3JDLE1BQU0sQ0FBQywrQkFBcUIsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUNwRCxXQUFXLEVBQUUsTUFBTTtZQUNuQixJQUFJLEVBQUUsS0FBSztZQUNYLFdBQVcsRUFBRSxFQUFFO1NBQ2hCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL1VzZXJzL05laWxEYWZ0YXJ5L1JOVHlwZXNjcmlwdC9oZWxwZXJzL19fdGVzdHNfXy93ZWF0aGVyLXRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbXB1dGVPdmVyYWxsV2VhdGhlciwga2VsdmluVG9GYXJlbmhlaXQgfSBmcm9tICcuLi93ZWF0aGVyJztcblxuY29uc3Qgc2FtcGxlUmVzcG9uc2UgPSB7XG4gIGNvb3JkOiB7XG4gICAgbG9uOiAtNzMuOTksXG4gICAgbGF0OiA0MC43M1xuICB9LFxuICB3ZWF0aGVyOiBbXG4gICAge1xuICAgICAgaWQ6IDUwMCxcbiAgICAgIG1haW46ICdSYWluJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnbGlnaHQgcmFpbicsXG4gICAgICBpY29uOiAnMTBkJ1xuICAgIH0sXG4gICAge1xuICAgICAgaWQ6IDcwMSxcbiAgICAgIG1haW46ICdNaXN0JyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnbWlzdCcsXG4gICAgICBpY29uOiAnNTBkJ1xuICAgIH1cbiAgXSxcbiAgYmFzZTogJ3N0YXRpb25zJyxcbiAgbWFpbjoge1xuICAgIHRlbXA6IDI4Mi41LFxuICAgIHByZXNzdXJlOiAxMDAzLFxuICAgIGh1bWlkaXR5OiA4NyxcbiAgICB0ZW1wX21pbjogMjgwLjE1LFxuICAgIHRlbXBfbWF4OiAyODQuODJcbiAgfSxcbiAgdmlzaWJpbGl0eTogMTEyNjUsXG4gIHdpbmQ6IHtcbiAgICBzcGVlZDogMy42LFxuICAgIGRlZzogMTYwXG4gIH0sXG4gIHJhaW46IHtcbiAgICAnMWgnOiAwLjI1XG4gIH0sXG4gIGNsb3Vkczoge1xuICAgIGFsbDogOTBcbiAgfSxcbiAgZHQ6IDE1NTQ4MzkzNTYsXG4gIHN5czoge1xuICAgIHR5cGU6IDEsXG4gICAgaWQ6IDQ2ODYsXG4gICAgbWVzc2FnZTogMC4wMDg4LFxuICAgIGNvdW50cnk6ICdVUycsXG4gICAgc3VucmlzZTogMTU1NDgwNTYwMixcbiAgICBzdW5zZXQ6IDE1NTQ4NTI0ODJcbiAgfSxcbiAgaWQ6IDUxMjg1ODEsXG4gIG5hbWU6ICdOZXcgWW9yaycsXG4gIGNvZDogMjAwXG59O1xuXG5kZXNjcmliZSgnV2VhdGhlciBIZWxwZXJzJywgKCkgPT4ge1xuICBkZXNjcmliZSgna2VsdmluVG9GYXJlbmhlaXQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjb252ZXJ0IEsgdG8gRicsICgpID0+IHtcbiAgICAgIGV4cGVjdChrZWx2aW5Ub0ZhcmVuaGVpdChzYW1wbGVSZXNwb25zZS5tYWluLnRlbXApKS50b0JlKDQ5KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2NvbXB1dGVPdmVyYWxsV2VhdGhlcicsICgpID0+IHtcbiAgICBleHBlY3QoY29tcHV0ZU92ZXJhbGxXZWF0aGVyKHNhbXBsZVJlc3BvbnNlKSkudG9FcXVhbCh7XG4gICAgICBkZXNjcmlwdGlvbjogJ1JhaW4nLFxuICAgICAgaWNvbjogJzEwZCcsXG4gICAgICB0ZW1wZXJhdHVyZTogNDlcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==