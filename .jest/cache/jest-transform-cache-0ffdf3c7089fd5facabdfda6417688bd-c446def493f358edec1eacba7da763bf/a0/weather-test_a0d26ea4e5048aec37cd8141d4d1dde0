d51a4e97df9cca7026b230212990ded0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const weather_1 = require("../weather");
const sampleResponse = {
    coord: {
        lon: -73.99,
        lat: 40.73
    },
    weather: [
        {
            id: 500,
            main: 'Rain',
            description: 'light rain',
            icon: '10d'
        },
        {
            id: 701,
            main: 'Mist',
            description: 'mist',
            icon: '50d'
        }
    ],
    base: 'stations',
    main: {
        temp: 282.5,
        pressure: 1003,
        humidity: 87,
        temp_min: 280.15,
        temp_max: 284.82
    },
    visibility: 11265,
    wind: {
        speed: 3.6,
        deg: 160
    },
    rain: {
        '1h': 0.25
    },
    clouds: {
        all: 90
    },
    dt: 1554839356,
    sys: {
        type: 1,
        id: 4686,
        message: 0.0088,
        country: 'US',
        sunrise: 1554805602,
        sunset: 1554852482
    },
    id: 5128581,
    name: 'New York',
    cod: 200
};
describe('Weather Helpers', () => {
    describe('kelvinToFarenheit', () => {
        it('should convert K to F', () => {
            expect(weather_1.kelvinToFarenheit(sampleResponse.main.temp)).toBe(49);
        });
    });
    describe('computeOverallWeather', () => {
        expect(weather_1.computeOverallWeather(sampleResponse)).toEqual({
            description: 'Rain',
            temperature: 49
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL05laWxEYWZ0YXJ5L1JOVHlwZXNjcmlwdC9oZWxwZXJzL19fdGVzdHNfXy93ZWF0aGVyLXRlc3QudHN4IiwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQXNFO0FBRXRFLE1BQU0sY0FBYyxHQUFHO0lBQ3JCLEtBQUssRUFBRTtRQUNMLEdBQUcsRUFBRSxDQUFDLEtBQUs7UUFDWCxHQUFHLEVBQUUsS0FBSztLQUNYO0lBQ0QsT0FBTyxFQUFFO1FBQ1A7WUFDRSxFQUFFLEVBQUUsR0FBRztZQUNQLElBQUksRUFBRSxNQUFNO1lBQ1osV0FBVyxFQUFFLFlBQVk7WUFDekIsSUFBSSxFQUFFLEtBQUs7U0FDWjtRQUNEO1lBQ0UsRUFBRSxFQUFFLEdBQUc7WUFDUCxJQUFJLEVBQUUsTUFBTTtZQUNaLFdBQVcsRUFBRSxNQUFNO1lBQ25CLElBQUksRUFBRSxLQUFLO1NBQ1o7S0FDRjtJQUNELElBQUksRUFBRSxVQUFVO0lBQ2hCLElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxLQUFLO1FBQ1gsUUFBUSxFQUFFLElBQUk7UUFDZCxRQUFRLEVBQUUsRUFBRTtRQUNaLFFBQVEsRUFBRSxNQUFNO1FBQ2hCLFFBQVEsRUFBRSxNQUFNO0tBQ2pCO0lBQ0QsVUFBVSxFQUFFLEtBQUs7SUFDakIsSUFBSSxFQUFFO1FBQ0osS0FBSyxFQUFFLEdBQUc7UUFDVixHQUFHLEVBQUUsR0FBRztLQUNUO0lBQ0QsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLElBQUk7S0FDWDtJQUNELE1BQU0sRUFBRTtRQUNOLEdBQUcsRUFBRSxFQUFFO0tBQ1I7SUFDRCxFQUFFLEVBQUUsVUFBVTtJQUNkLEdBQUcsRUFBRTtRQUNILElBQUksRUFBRSxDQUFDO1FBQ1AsRUFBRSxFQUFFLElBQUk7UUFDUixPQUFPLEVBQUUsTUFBTTtRQUNmLE9BQU8sRUFBRSxJQUFJO1FBQ2IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsTUFBTSxFQUFFLFVBQVU7S0FDbkI7SUFDRCxFQUFFLEVBQUUsT0FBTztJQUNYLElBQUksRUFBRSxVQUFVO0lBQ2hCLEdBQUcsRUFBRSxHQUFHO0NBQ1QsQ0FBQztBQUVGLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDL0IsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUNqQyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1lBQy9CLE1BQU0sQ0FBQywyQkFBaUIsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1FBQ3JDLE1BQU0sQ0FBQywrQkFBcUIsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztZQUNwRCxXQUFXLEVBQUUsTUFBTTtZQUNuQixXQUFXLEVBQUUsRUFBRTtTQUNoQixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9OZWlsRGFmdGFyeS9STlR5cGVzY3JpcHQvaGVscGVycy9fX3Rlc3RzX18vd2VhdGhlci10ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21wdXRlT3ZlcmFsbFdlYXRoZXIsIGtlbHZpblRvRmFyZW5oZWl0IH0gZnJvbSAnLi4vd2VhdGhlcic7XG5cbmNvbnN0IHNhbXBsZVJlc3BvbnNlID0ge1xuICBjb29yZDoge1xuICAgIGxvbjogLTczLjk5LFxuICAgIGxhdDogNDAuNzNcbiAgfSxcbiAgd2VhdGhlcjogW1xuICAgIHtcbiAgICAgIGlkOiA1MDAsXG4gICAgICBtYWluOiAnUmFpbicsXG4gICAgICBkZXNjcmlwdGlvbjogJ2xpZ2h0IHJhaW4nLFxuICAgICAgaWNvbjogJzEwZCdcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiA3MDEsXG4gICAgICBtYWluOiAnTWlzdCcsXG4gICAgICBkZXNjcmlwdGlvbjogJ21pc3QnLFxuICAgICAgaWNvbjogJzUwZCdcbiAgICB9XG4gIF0sXG4gIGJhc2U6ICdzdGF0aW9ucycsXG4gIG1haW46IHtcbiAgICB0ZW1wOiAyODIuNSxcbiAgICBwcmVzc3VyZTogMTAwMyxcbiAgICBodW1pZGl0eTogODcsXG4gICAgdGVtcF9taW46IDI4MC4xNSxcbiAgICB0ZW1wX21heDogMjg0LjgyXG4gIH0sXG4gIHZpc2liaWxpdHk6IDExMjY1LFxuICB3aW5kOiB7XG4gICAgc3BlZWQ6IDMuNixcbiAgICBkZWc6IDE2MFxuICB9LFxuICByYWluOiB7XG4gICAgJzFoJzogMC4yNVxuICB9LFxuICBjbG91ZHM6IHtcbiAgICBhbGw6IDkwXG4gIH0sXG4gIGR0OiAxNTU0ODM5MzU2LFxuICBzeXM6IHtcbiAgICB0eXBlOiAxLFxuICAgIGlkOiA0Njg2LFxuICAgIG1lc3NhZ2U6IDAuMDA4OCxcbiAgICBjb3VudHJ5OiAnVVMnLFxuICAgIHN1bnJpc2U6IDE1NTQ4MDU2MDIsXG4gICAgc3Vuc2V0OiAxNTU0ODUyNDgyXG4gIH0sXG4gIGlkOiA1MTI4NTgxLFxuICBuYW1lOiAnTmV3IFlvcmsnLFxuICBjb2Q6IDIwMFxufTtcblxuZGVzY3JpYmUoJ1dlYXRoZXIgSGVscGVycycsICgpID0+IHtcbiAgZGVzY3JpYmUoJ2tlbHZpblRvRmFyZW5oZWl0JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY29udmVydCBLIHRvIEYnLCAoKSA9PiB7XG4gICAgICBleHBlY3Qoa2VsdmluVG9GYXJlbmhlaXQoc2FtcGxlUmVzcG9uc2UubWFpbi50ZW1wKSkudG9CZSg0OSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdjb21wdXRlT3ZlcmFsbFdlYXRoZXInLCAoKSA9PiB7XG4gICAgZXhwZWN0KGNvbXB1dGVPdmVyYWxsV2VhdGhlcihzYW1wbGVSZXNwb25zZSkpLnRvRXF1YWwoe1xuICAgICAgZGVzY3JpcHRpb246ICdSYWluJyxcbiAgICAgIHRlbXBlcmF0dXJlOiA0OVxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9