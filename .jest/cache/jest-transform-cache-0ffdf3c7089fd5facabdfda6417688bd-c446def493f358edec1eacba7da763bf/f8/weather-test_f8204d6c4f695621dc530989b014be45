3492d39a8f4da832c4767f512ae31ff3
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const weather_1 = require("../weather");
const sampleResponse = {
    coord: {
        lon: -73.99,
        lat: 40.73
    },
    weather: [
        {
            id: 500,
            main: 'Rain',
            description: 'light rain',
            icon: '10d'
        },
        {
            id: 701,
            main: 'Mist',
            description: 'mist',
            icon: '50d'
        }
    ],
    base: 'stations',
    main: {
        temp: 282.5,
        pressure: 1003,
        humidity: 87,
        temp_min: 280.15,
        temp_max: 284.82
    },
    visibility: 11265,
    wind: {
        speed: 3.6,
        deg: 160
    },
    rain: {
        '1h': 0.25
    },
    clouds: {
        all: 90
    },
    dt: 1554839356,
    sys: {
        type: 1,
        id: 4686,
        message: 0.0088,
        country: 'US',
        sunrise: 1554805602,
        sunset: 1554852482
    },
    id: 5128581,
    name: 'New York',
    cod: 200
};
describe('Weather Helpers', () => {
    describe('kelvinToFarenheit', () => {
        it('should convert K to F', () => {
            expect(weather_1.kelvinToFarenheit(sampleResponse.main.temp)).toBe(49);
        });
    });
    describe('computeOverallWeather', () => {
        expect(weather_1.computeOverallWeather(sampleResponse.weather)).toEqual({
            description: 'Rain',
            temperature: 49
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL05laWxEYWZ0YXJ5L1JOVHlwZXNjcmlwdC9oZWxwZXJzL19fdGVzdHNfXy93ZWF0aGVyLXRlc3QudHN4IiwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQXNFO0FBRXRFLE1BQU0sY0FBYyxHQUFHO0lBQ3JCLEtBQUssRUFBRTtRQUNMLEdBQUcsRUFBRSxDQUFDLEtBQUs7UUFDWCxHQUFHLEVBQUUsS0FBSztLQUNYO0lBQ0QsT0FBTyxFQUFFO1FBQ1A7WUFDRSxFQUFFLEVBQUUsR0FBRztZQUNQLElBQUksRUFBRSxNQUFNO1lBQ1osV0FBVyxFQUFFLFlBQVk7WUFDekIsSUFBSSxFQUFFLEtBQUs7U0FDWjtRQUNEO1lBQ0UsRUFBRSxFQUFFLEdBQUc7WUFDUCxJQUFJLEVBQUUsTUFBTTtZQUNaLFdBQVcsRUFBRSxNQUFNO1lBQ25CLElBQUksRUFBRSxLQUFLO1NBQ1o7S0FDRjtJQUNELElBQUksRUFBRSxVQUFVO0lBQ2hCLElBQUksRUFBRTtRQUNKLElBQUksRUFBRSxLQUFLO1FBQ1gsUUFBUSxFQUFFLElBQUk7UUFDZCxRQUFRLEVBQUUsRUFBRTtRQUNaLFFBQVEsRUFBRSxNQUFNO1FBQ2hCLFFBQVEsRUFBRSxNQUFNO0tBQ2pCO0lBQ0QsVUFBVSxFQUFFLEtBQUs7SUFDakIsSUFBSSxFQUFFO1FBQ0osS0FBSyxFQUFFLEdBQUc7UUFDVixHQUFHLEVBQUUsR0FBRztLQUNUO0lBQ0QsSUFBSSxFQUFFO1FBQ0osSUFBSSxFQUFFLElBQUk7S0FDWDtJQUNELE1BQU0sRUFBRTtRQUNOLEdBQUcsRUFBRSxFQUFFO0tBQ1I7SUFDRCxFQUFFLEVBQUUsVUFBVTtJQUNkLEdBQUcsRUFBRTtRQUNILElBQUksRUFBRSxDQUFDO1FBQ1AsRUFBRSxFQUFFLElBQUk7UUFDUixPQUFPLEVBQUUsTUFBTTtRQUNmLE9BQU8sRUFBRSxJQUFJO1FBQ2IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsTUFBTSxFQUFFLFVBQVU7S0FDbkI7SUFDRCxFQUFFLEVBQUUsT0FBTztJQUNYLElBQUksRUFBRSxVQUFVO0lBQ2hCLEdBQUcsRUFBRSxHQUFHO0NBQ1QsQ0FBQztBQUVGLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxHQUFHLEVBQUU7SUFDL0IsUUFBUSxDQUFDLG1CQUFtQixFQUFFLEdBQUcsRUFBRTtRQUNqQyxFQUFFLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1lBQy9CLE1BQU0sQ0FBQywyQkFBaUIsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsdUJBQXVCLEVBQUUsR0FBRyxFQUFFO1FBQ3JDLE1BQU0sQ0FBQywrQkFBcUIsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDNUQsV0FBVyxFQUFFLE1BQU07WUFDbkIsV0FBVyxFQUFFLEVBQUU7U0FDaEIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvTmVpbERhZnRhcnkvUk5UeXBlc2NyaXB0L2hlbHBlcnMvX190ZXN0c19fL3dlYXRoZXItdGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcHV0ZU92ZXJhbGxXZWF0aGVyLCBrZWx2aW5Ub0ZhcmVuaGVpdCB9IGZyb20gJy4uL3dlYXRoZXInO1xuXG5jb25zdCBzYW1wbGVSZXNwb25zZSA9IHtcbiAgY29vcmQ6IHtcbiAgICBsb246IC03My45OSxcbiAgICBsYXQ6IDQwLjczXG4gIH0sXG4gIHdlYXRoZXI6IFtcbiAgICB7XG4gICAgICBpZDogNTAwLFxuICAgICAgbWFpbjogJ1JhaW4nLFxuICAgICAgZGVzY3JpcHRpb246ICdsaWdodCByYWluJyxcbiAgICAgIGljb246ICcxMGQnXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogNzAxLFxuICAgICAgbWFpbjogJ01pc3QnLFxuICAgICAgZGVzY3JpcHRpb246ICdtaXN0JyxcbiAgICAgIGljb246ICc1MGQnXG4gICAgfVxuICBdLFxuICBiYXNlOiAnc3RhdGlvbnMnLFxuICBtYWluOiB7XG4gICAgdGVtcDogMjgyLjUsXG4gICAgcHJlc3N1cmU6IDEwMDMsXG4gICAgaHVtaWRpdHk6IDg3LFxuICAgIHRlbXBfbWluOiAyODAuMTUsXG4gICAgdGVtcF9tYXg6IDI4NC44MlxuICB9LFxuICB2aXNpYmlsaXR5OiAxMTI2NSxcbiAgd2luZDoge1xuICAgIHNwZWVkOiAzLjYsXG4gICAgZGVnOiAxNjBcbiAgfSxcbiAgcmFpbjoge1xuICAgICcxaCc6IDAuMjVcbiAgfSxcbiAgY2xvdWRzOiB7XG4gICAgYWxsOiA5MFxuICB9LFxuICBkdDogMTU1NDgzOTM1NixcbiAgc3lzOiB7XG4gICAgdHlwZTogMSxcbiAgICBpZDogNDY4NixcbiAgICBtZXNzYWdlOiAwLjAwODgsXG4gICAgY291bnRyeTogJ1VTJyxcbiAgICBzdW5yaXNlOiAxNTU0ODA1NjAyLFxuICAgIHN1bnNldDogMTU1NDg1MjQ4MlxuICB9LFxuICBpZDogNTEyODU4MSxcbiAgbmFtZTogJ05ldyBZb3JrJyxcbiAgY29kOiAyMDBcbn07XG5cbmRlc2NyaWJlKCdXZWF0aGVyIEhlbHBlcnMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdrZWx2aW5Ub0ZhcmVuaGVpdCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNvbnZlcnQgSyB0byBGJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KGtlbHZpblRvRmFyZW5oZWl0KHNhbXBsZVJlc3BvbnNlLm1haW4udGVtcCkpLnRvQmUoNDkpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnY29tcHV0ZU92ZXJhbGxXZWF0aGVyJywgKCkgPT4ge1xuICAgIGV4cGVjdChjb21wdXRlT3ZlcmFsbFdlYXRoZXIoc2FtcGxlUmVzcG9uc2Uud2VhdGhlcikpLnRvRXF1YWwoe1xuICAgICAgZGVzY3JpcHRpb246ICdSYWluJyxcbiAgICAgIHRlbXBlcmF0dXJlOiA0OVxuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9